{
    "contents" : "A Diamond in the Rough\n======================\ntransition: rotate\ntransition-speed: slow\ncss: IDSLabCSS.css\n\nUnit 1 - Lab 7\n\nDirections: Follow along with the slides and answer the questions in **red** font in your journal.\n\n```{r, eval=TRUE, echo=FALSE, results='hide', message=FALSE, warning=FALSE}\nrequire(mosaic)\nload(\"~/Dropbox/IDS Curriculum Design/Labs/Unit 1 Labs/Lab 07/atus_dirty.RData\")\n```\n\nMessy data? Get used to it\n==========================\n\n- Since lab 1, we've been using data from the CDC.\n- What you might not have noticed was how **clean** the data was:\n    - Variables were named so we could understand what they were about.\n    - There didn't seem to be any _typos_ in the values.\n    - The variables were formatted properly.\n    - etc.\n\n- Unfortunately, more often than not, data is **messy** until YOU clean it.\n\nMessy data?\n===========\n\n- What do we mean by messy data?\n- Variables might have **non-descriptive names**\n    - _Var01_, _V2_, _a_, ...\n- Categorical variables might have **misspelled categories**\n    - _\"blue\"_, _\"Blue\"_, _\"blu\"_, ...\n- Numerical variables might have been **input incorrectly**. For example, if we're talk about people's height in inches:\n    - _64.7_, _68.6_, _676_, ... \n- Numerical variables might be **incorrectly coded** as categorical variables (Or vice-versa)\n    - \"64.7\", \"68.6\", \"67.6\"\n    \nThe American Time Use Survey\n============================\n\n- To show you what **messy** data looks like, we'll check out the _American Time Use Survey_, or _ATUS_.\n- What is ATUS?\n    - It's a survey conducted by the US government (Specifically the Bureau of Labor Statistics)\n    - Survey thousands of people to find out exactly what activities they do throughout a single day.\n    - Combine the thousands of people together to get an idea about how much time the typical person living in the US spends doing various activites.\n\nThe American Time Use Survey\n============================\n\n- Let's take a look at the data before it's been properly cleaned.\n    - Data scientists call the act of cleaning data **Munging**\n- Type the following commands into your console:\n```{r, eval=FALSE}\nload(\"~/Dropbox/IDS Curriculum Design/Labs/Unit 1 Labs/Lab 07/atus_dirty.RData\")\n```\n```{r, eval=FALSE}\nView(atus_dirty)\n```\n- **Write down as many problems with the data as you can find.**\n\nFixing Variable Names\n=====================\n\n- Let's start our cleaning by fixing the variables names.\n- Currently the variables are named: `r names(atus_dirty)`\n    - Verify this by typing `names(atus_dirty)` into the console.\n\nDescription of ATUS Variables\n=============================\n\n- The description of the actual variables:\n    - `caseid`: Anonymous ID of survey taker.\n    - `V1`: The age of the respondent.\n    - `V2`: The gender of the respondent.\n    - `V3`: Whether the person is employed full time or part time.\n    - `V4`: Whether the person has a physical difficulty.\n    - `V5`: How long the person sleeps, in minutes.\n    - `V6`: How long the survey take spent on homework, in minutes.\n    - `V7`: How long the respondent spent socializing, in minutes.\n\nNew name, same old data\n=======================\n\n- To fix the variable names, we need to _assign_ a new set of names in place of the old ones. \n- Something like:\n```{r, eval=FALSE}\nnames(atus_dirty) <- c(new_name1, new_name2, ...)\n```\n\n- This would take the first variable (`r names(atus_dirty)[1]`) and rename it `new_name1`.\n- It would then take the second variable (`r names(atus_dirty)[1]`) and rename it `new_name2`.\n- And so on...\n\nOn your own\n===========\n\n- **Come up with new variable names for each variable in the data**\n    - Good names should be short and describe what the variable is related to.\n    - Use an _underscore_ '_' to combine 2 words or abbreviated words if you'd like.\n- **Rename your variables using the method on the previous slide**\n- **`View` your data when you're done. Make sure that the names are in the correct order**\n\n\nEveryone together\n=================\n\n- To keep everyone together for the rest of the lab, let's agree to adopt a common set of variable names.\n    - (I'm sure your variable names were very good).\n- Type the following into the console:\n```{r, results = 'hide'}\nnames(atus_dirty) <- c(\"caseid\",\n                       \"age\",\n                       \"gender\",\n                       \"fulltime_emp\",\n                       \"phys_challenge\",\n                       \"sleep\",\n                       \"homework\",\n                       \"socializing\")\n\n```\n\n\nPlaying with Strings\n=============================\n\n- In programming, a **string** is sort of like a _word_.\n    - It's a value made up of **characters** (i.e. letters)\n- The following are example of strings. Notice that each **string** has quotes before and after.\n```{r,eval=FALSE}\n\"string\"\n```\n```{r,eval=FALSE}\n\"A1B2c3\"\n```\n```{r,eval=FALSE}\n\"Hot Cocoa\"\n```\n\nNumbers are words? (Sometimes)\n=============================\n\n- Type the following commands into the console:\n```{r,eval=FALSE}\n0015\n```\n```{r,eval=FALSE}\n\"0015\"\n```\n\n- **What's different about each output?**\n- **What do you think would happen if we multiplied two _strings_ together?**\n    - **Create two strings and try it!**  \n  \nChanging strings into numbers\n=============================    \n\n- **strings** in R are called **character** objects.    \n- Click on the _Environment_ pane and find the `atus_dirty`, data. \n- Click on the blue arrow next to it.\n    - Find the `age` variable under `atus_dirty`\n- **Notice that R thinks, for the moment, that _age_ is a _chr_ or _character_ object**\n- **How many of the other variables you thought should be numerical variables were miss specified as factors _character_ objects?**\n\n\nChanging strings into numbers\n=============================\n\n- To fix this problem, we need to tell R to think of our variables **`as.numeric`** variables.\n    - But first, we need a way make changes to a single variable in the data.\n    - Can do this using the dollar sign ($).\n    - Whenever you need to get a single _variable_ from your _data_, write:\n    <center>**`data$variable`**</center>\n- **What happens when you type `atus_dirty$age` into the console?**\n\nChanging strings into numbers\n=============================\n\n- To fix our **age** variable then, we'd write:\n```{r, eval=FALSE}\natus_dirty$age <- as.numeric(atus_dirty$age)\n```\n- This code is telling R:\n    - \"Take the current values of my _age_ variable in my *atus_dirty* data...\"\n    - \"... and assign it ...\"\n    - \"... the **numeric** values of my _age_ variable in my *atus_dirty* data.\"\n\nOn your own\n=============================\n\n- Click on the _Environment_ tab again.\n    - Click on the blue arrow next to `atus_dirty` and find `age`\n    - **Instead of reading _chr_, next to `age`, what does it say now?** \n- **Using the steps you just followed to change `age` into a numeric variable, do the same stapes for the following variables:**\n    - `sleep` \n    - `homework`\n    - `socializing` \n\nDeciphering Categorical Variables\n=================================\n\n- Let's take a look at our **gender** variable:\n\n```{r,eval=FALSE}\nView(atus_dirty)\n```\n\n- Clearly, **gender** is a categorical variable but it's categories are represented by numbers.\n    - This isn't necessarily a huge problem, but our data would be much clearer if we could replace the numbers `\"01\"` and `\"02\"` with `\"Male\"` and `\"Female\"`.\n    \nFactors and Levels\n==================\n\n- R has a special name for _categorical_ variables, called **Factors**.\n- R also has a special name for the different _categories_ of a _categorical_ variable.\n    - The individual categories are called **`\"levels\"`**.\n- Take a look at the **`levels`** of the **gender** variable by typing:\n```{r,eval=FALSE}\nlevels(atus_dirty$gender)\n```\n\nFactors and Levels\n==================\n\n```{r,eval=FALSE}\nlevels(atus_dirty$gender)\n```\n\n- Let's go through the code, step-by-step, to see what we're asking R to tell us:\n    - \"Show me the **`levels`** (i.e. categories)...\"\n    - \"... for the factor (i.e. categorical variable) **gender**...\"\n    - \"... which can be found in the **`atus_dirty`** data.\"\n\nA level by any other name...\n===========================\n\n- If we know that `01` means `Male` and `02` means `female` then we can use the following code to rename the **`levels`** of _gender_.\n- Type the following command into your console:\n```{r,eval=FALSE}\nlevels(atus_dirty$gender) <- c(\"Male\",\n                               \"Female\")\n```\n\n- This code is telling R:\n    - \"Take my old levels of **gender**...\"\n    - \"... and assign the values of ...\"\n    - \"... **Male** to `01` and **Female** to `02`.\"\n\nFactors and Levels\n==================\n\n- `View` your data again and look at the values for **gender**\n- **Rename the values of the variable `phys_challenge` where**\n    - **`01:** No difficulty\n    - **`02:** Has difficulty\n\nTa-da!\n======\n\n- It took some work, but you should have a data set you can be proud of.\n- Let's rename our data now that it's clean:\n```{r,eval=FALSE}\natus_clean <- atus_dirty\n```\n- And let's also take a moment to admire it:\n```{r, eval=FALSE}\nView(atus_clean)\n```\n\n\n\n",
    "created" : 1400304784117.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3850707910",
    "id" : "4772BB5A",
    "lastKnownWriteTime" : 1400350010,
    "path" : "~/Dropbox/IDS Curriculum Design/Labs/Unit 1 Labs/Lab 07/Lab1-7_A_Diamond_in_the_Rough.Rpres",
    "project_path" : "Unit 1 Labs/Lab 07/Lab1-7_A_Diamond_in_the_Rough.Rpres",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_presentation"
}